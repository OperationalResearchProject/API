// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hcfi.proto

#ifndef PROTOBUF_hcfi_2eproto__INCLUDED
#define PROTOBUF_hcfi_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace hcfi {
class FitnessRequest;
class FitnessRequestDefaultTypeInternal;
extern FitnessRequestDefaultTypeInternal _FitnessRequest_default_instance_;
class FitnessResponse;
class FitnessResponseDefaultTypeInternal;
extern FitnessResponseDefaultTypeInternal _FitnessResponse_default_instance_;
class InitRequest;
class InitRequestDefaultTypeInternal;
extern InitRequestDefaultTypeInternal _InitRequest_default_instance_;
class StopRequest;
class StopRequestDefaultTypeInternal;
extern StopRequestDefaultTypeInternal _StopRequest_default_instance_;
class StopResponse;
class StopResponseDefaultTypeInternal;
extern StopResponseDefaultTypeInternal _StopResponse_default_instance_;
}  // namespace hcfi

namespace hcfi {

namespace protobuf_hcfi_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_hcfi_2eproto

// ===================================================================

class InitRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hcfi.InitRequest) */ {
 public:
  InitRequest();
  virtual ~InitRequest();

  InitRequest(const InitRequest& from);

  inline InitRequest& operator=(const InitRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InitRequest& default_instance();

  static inline const InitRequest* internal_default_instance() {
    return reinterpret_cast<const InitRequest*>(
               &_InitRequest_default_instance_);
  }

  void Swap(InitRequest* other);

  // implements Message ----------------------------------------------

  inline InitRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  InitRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InitRequest& from);
  void MergeFrom(const InitRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InitRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string customer = 1;
  void clear_customer();
  static const int kCustomerFieldNumber = 1;
  const ::std::string& customer() const;
  void set_customer(const ::std::string& value);
  #if LANG_CXX11
  void set_customer(::std::string&& value);
  #endif
  void set_customer(const char* value);
  void set_customer(const char* value, size_t size);
  ::std::string* mutable_customer();
  ::std::string* release_customer();
  void set_allocated_customer(::std::string* customer);

  // string solution = 4;
  void clear_solution();
  static const int kSolutionFieldNumber = 4;
  const ::std::string& solution() const;
  void set_solution(const ::std::string& value);
  #if LANG_CXX11
  void set_solution(::std::string&& value);
  #endif
  void set_solution(const char* value);
  void set_solution(const char* value, size_t size);
  ::std::string* mutable_solution();
  ::std::string* release_solution();
  void set_allocated_solution(::std::string* solution);

  // string algorithm = 5;
  void clear_algorithm();
  static const int kAlgorithmFieldNumber = 5;
  const ::std::string& algorithm() const;
  void set_algorithm(const ::std::string& value);
  #if LANG_CXX11
  void set_algorithm(::std::string&& value);
  #endif
  void set_algorithm(const char* value);
  void set_algorithm(const char* value, size_t size);
  ::std::string* mutable_algorithm();
  ::std::string* release_algorithm();
  void set_allocated_algorithm(::std::string* algorithm);

  // double fitness = 3;
  void clear_fitness();
  static const int kFitnessFieldNumber = 3;
  double fitness() const;
  void set_fitness(double value);

  // int32 solutionSize = 2;
  void clear_solutionsize();
  static const int kSolutionSizeFieldNumber = 2;
  ::google::protobuf::int32 solutionsize() const;
  void set_solutionsize(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:hcfi.InitRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr customer_;
  ::google::protobuf::internal::ArenaStringPtr solution_;
  ::google::protobuf::internal::ArenaStringPtr algorithm_;
  double fitness_;
  ::google::protobuf::int32 solutionsize_;
  mutable int _cached_size_;
  friend struct  protobuf_hcfi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FitnessResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hcfi.FitnessResponse) */ {
 public:
  FitnessResponse();
  virtual ~FitnessResponse();

  FitnessResponse(const FitnessResponse& from);

  inline FitnessResponse& operator=(const FitnessResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FitnessResponse& default_instance();

  static inline const FitnessResponse* internal_default_instance() {
    return reinterpret_cast<const FitnessResponse*>(
               &_FitnessResponse_default_instance_);
  }

  void Swap(FitnessResponse* other);

  // implements Message ----------------------------------------------

  inline FitnessResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  FitnessResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FitnessResponse& from);
  void MergeFrom(const FitnessResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FitnessResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string solution = 2;
  void clear_solution();
  static const int kSolutionFieldNumber = 2;
  const ::std::string& solution() const;
  void set_solution(const ::std::string& value);
  #if LANG_CXX11
  void set_solution(::std::string&& value);
  #endif
  void set_solution(const char* value);
  void set_solution(const char* value, size_t size);
  ::std::string* mutable_solution();
  ::std::string* release_solution();
  void set_allocated_solution(::std::string* solution);

  // @@protoc_insertion_point(class_scope:hcfi.FitnessResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr solution_;
  mutable int _cached_size_;
  friend struct  protobuf_hcfi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FitnessRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hcfi.FitnessRequest) */ {
 public:
  FitnessRequest();
  virtual ~FitnessRequest();

  FitnessRequest(const FitnessRequest& from);

  inline FitnessRequest& operator=(const FitnessRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FitnessRequest& default_instance();

  static inline const FitnessRequest* internal_default_instance() {
    return reinterpret_cast<const FitnessRequest*>(
               &_FitnessRequest_default_instance_);
  }

  void Swap(FitnessRequest* other);

  // implements Message ----------------------------------------------

  inline FitnessRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  FitnessRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FitnessRequest& from);
  void MergeFrom(const FitnessRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FitnessRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string solution = 3;
  void clear_solution();
  static const int kSolutionFieldNumber = 3;
  const ::std::string& solution() const;
  void set_solution(const ::std::string& value);
  #if LANG_CXX11
  void set_solution(::std::string&& value);
  #endif
  void set_solution(const char* value);
  void set_solution(const char* value, size_t size);
  ::std::string* mutable_solution();
  ::std::string* release_solution();
  void set_allocated_solution(::std::string* solution);

  // double fitness = 2;
  void clear_fitness();
  static const int kFitnessFieldNumber = 2;
  double fitness() const;
  void set_fitness(double value);

  // @@protoc_insertion_point(class_scope:hcfi.FitnessRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr solution_;
  double fitness_;
  mutable int _cached_size_;
  friend struct  protobuf_hcfi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StopRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hcfi.StopRequest) */ {
 public:
  StopRequest();
  virtual ~StopRequest();

  StopRequest(const StopRequest& from);

  inline StopRequest& operator=(const StopRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopRequest& default_instance();

  static inline const StopRequest* internal_default_instance() {
    return reinterpret_cast<const StopRequest*>(
               &_StopRequest_default_instance_);
  }

  void Swap(StopRequest* other);

  // implements Message ----------------------------------------------

  inline StopRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  StopRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StopRequest& from);
  void MergeFrom(const StopRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StopRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:hcfi.StopRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable int _cached_size_;
  friend struct  protobuf_hcfi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StopResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hcfi.StopResponse) */ {
 public:
  StopResponse();
  virtual ~StopResponse();

  StopResponse(const StopResponse& from);

  inline StopResponse& operator=(const StopResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopResponse& default_instance();

  static inline const StopResponse* internal_default_instance() {
    return reinterpret_cast<const StopResponse*>(
               &_StopResponse_default_instance_);
  }

  void Swap(StopResponse* other);

  // implements Message ----------------------------------------------

  inline StopResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  StopResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StopResponse& from);
  void MergeFrom(const StopResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StopResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string solution = 2;
  void clear_solution();
  static const int kSolutionFieldNumber = 2;
  const ::std::string& solution() const;
  void set_solution(const ::std::string& value);
  #if LANG_CXX11
  void set_solution(::std::string&& value);
  #endif
  void set_solution(const char* value);
  void set_solution(const char* value, size_t size);
  ::std::string* mutable_solution();
  ::std::string* release_solution();
  void set_allocated_solution(::std::string* solution);

  // double fitness = 3;
  void clear_fitness();
  static const int kFitnessFieldNumber = 3;
  double fitness() const;
  void set_fitness(double value);

  // @@protoc_insertion_point(class_scope:hcfi.StopResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr solution_;
  double fitness_;
  mutable int _cached_size_;
  friend struct  protobuf_hcfi_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// InitRequest

// string customer = 1;
inline void InitRequest::clear_customer() {
  customer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InitRequest::customer() const {
  // @@protoc_insertion_point(field_get:hcfi.InitRequest.customer)
  return customer_.GetNoArena();
}
inline void InitRequest::set_customer(const ::std::string& value) {
  
  customer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hcfi.InitRequest.customer)
}
#if LANG_CXX11
inline void InitRequest::set_customer(::std::string&& value) {
  
  customer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hcfi.InitRequest.customer)
}
#endif
inline void InitRequest::set_customer(const char* value) {
  
  customer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hcfi.InitRequest.customer)
}
inline void InitRequest::set_customer(const char* value, size_t size) {
  
  customer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hcfi.InitRequest.customer)
}
inline ::std::string* InitRequest::mutable_customer() {
  
  // @@protoc_insertion_point(field_mutable:hcfi.InitRequest.customer)
  return customer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InitRequest::release_customer() {
  // @@protoc_insertion_point(field_release:hcfi.InitRequest.customer)
  
  return customer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InitRequest::set_allocated_customer(::std::string* customer) {
  if (customer != NULL) {
    
  } else {
    
  }
  customer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer);
  // @@protoc_insertion_point(field_set_allocated:hcfi.InitRequest.customer)
}

// int32 solutionSize = 2;
inline void InitRequest::clear_solutionsize() {
  solutionsize_ = 0;
}
inline ::google::protobuf::int32 InitRequest::solutionsize() const {
  // @@protoc_insertion_point(field_get:hcfi.InitRequest.solutionSize)
  return solutionsize_;
}
inline void InitRequest::set_solutionsize(::google::protobuf::int32 value) {
  
  solutionsize_ = value;
  // @@protoc_insertion_point(field_set:hcfi.InitRequest.solutionSize)
}

// double fitness = 3;
inline void InitRequest::clear_fitness() {
  fitness_ = 0;
}
inline double InitRequest::fitness() const {
  // @@protoc_insertion_point(field_get:hcfi.InitRequest.fitness)
  return fitness_;
}
inline void InitRequest::set_fitness(double value) {
  
  fitness_ = value;
  // @@protoc_insertion_point(field_set:hcfi.InitRequest.fitness)
}

// string solution = 4;
inline void InitRequest::clear_solution() {
  solution_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InitRequest::solution() const {
  // @@protoc_insertion_point(field_get:hcfi.InitRequest.solution)
  return solution_.GetNoArena();
}
inline void InitRequest::set_solution(const ::std::string& value) {
  
  solution_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hcfi.InitRequest.solution)
}
#if LANG_CXX11
inline void InitRequest::set_solution(::std::string&& value) {
  
  solution_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hcfi.InitRequest.solution)
}
#endif
inline void InitRequest::set_solution(const char* value) {
  
  solution_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hcfi.InitRequest.solution)
}
inline void InitRequest::set_solution(const char* value, size_t size) {
  
  solution_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hcfi.InitRequest.solution)
}
inline ::std::string* InitRequest::mutable_solution() {
  
  // @@protoc_insertion_point(field_mutable:hcfi.InitRequest.solution)
  return solution_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InitRequest::release_solution() {
  // @@protoc_insertion_point(field_release:hcfi.InitRequest.solution)
  
  return solution_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InitRequest::set_allocated_solution(::std::string* solution) {
  if (solution != NULL) {
    
  } else {
    
  }
  solution_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), solution);
  // @@protoc_insertion_point(field_set_allocated:hcfi.InitRequest.solution)
}

// string algorithm = 5;
inline void InitRequest::clear_algorithm() {
  algorithm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InitRequest::algorithm() const {
  // @@protoc_insertion_point(field_get:hcfi.InitRequest.algorithm)
  return algorithm_.GetNoArena();
}
inline void InitRequest::set_algorithm(const ::std::string& value) {
  
  algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hcfi.InitRequest.algorithm)
}
#if LANG_CXX11
inline void InitRequest::set_algorithm(::std::string&& value) {
  
  algorithm_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hcfi.InitRequest.algorithm)
}
#endif
inline void InitRequest::set_algorithm(const char* value) {
  
  algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hcfi.InitRequest.algorithm)
}
inline void InitRequest::set_algorithm(const char* value, size_t size) {
  
  algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hcfi.InitRequest.algorithm)
}
inline ::std::string* InitRequest::mutable_algorithm() {
  
  // @@protoc_insertion_point(field_mutable:hcfi.InitRequest.algorithm)
  return algorithm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InitRequest::release_algorithm() {
  // @@protoc_insertion_point(field_release:hcfi.InitRequest.algorithm)
  
  return algorithm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InitRequest::set_allocated_algorithm(::std::string* algorithm) {
  if (algorithm != NULL) {
    
  } else {
    
  }
  algorithm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), algorithm);
  // @@protoc_insertion_point(field_set_allocated:hcfi.InitRequest.algorithm)
}

// -------------------------------------------------------------------

// FitnessResponse

// string id = 1;
inline void FitnessResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FitnessResponse::id() const {
  // @@protoc_insertion_point(field_get:hcfi.FitnessResponse.id)
  return id_.GetNoArena();
}
inline void FitnessResponse::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hcfi.FitnessResponse.id)
}
#if LANG_CXX11
inline void FitnessResponse::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hcfi.FitnessResponse.id)
}
#endif
inline void FitnessResponse::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hcfi.FitnessResponse.id)
}
inline void FitnessResponse::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hcfi.FitnessResponse.id)
}
inline ::std::string* FitnessResponse::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:hcfi.FitnessResponse.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FitnessResponse::release_id() {
  // @@protoc_insertion_point(field_release:hcfi.FitnessResponse.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FitnessResponse::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:hcfi.FitnessResponse.id)
}

// string solution = 2;
inline void FitnessResponse::clear_solution() {
  solution_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FitnessResponse::solution() const {
  // @@protoc_insertion_point(field_get:hcfi.FitnessResponse.solution)
  return solution_.GetNoArena();
}
inline void FitnessResponse::set_solution(const ::std::string& value) {
  
  solution_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hcfi.FitnessResponse.solution)
}
#if LANG_CXX11
inline void FitnessResponse::set_solution(::std::string&& value) {
  
  solution_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hcfi.FitnessResponse.solution)
}
#endif
inline void FitnessResponse::set_solution(const char* value) {
  
  solution_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hcfi.FitnessResponse.solution)
}
inline void FitnessResponse::set_solution(const char* value, size_t size) {
  
  solution_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hcfi.FitnessResponse.solution)
}
inline ::std::string* FitnessResponse::mutable_solution() {
  
  // @@protoc_insertion_point(field_mutable:hcfi.FitnessResponse.solution)
  return solution_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FitnessResponse::release_solution() {
  // @@protoc_insertion_point(field_release:hcfi.FitnessResponse.solution)
  
  return solution_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FitnessResponse::set_allocated_solution(::std::string* solution) {
  if (solution != NULL) {
    
  } else {
    
  }
  solution_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), solution);
  // @@protoc_insertion_point(field_set_allocated:hcfi.FitnessResponse.solution)
}

// -------------------------------------------------------------------

// FitnessRequest

// string id = 1;
inline void FitnessRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FitnessRequest::id() const {
  // @@protoc_insertion_point(field_get:hcfi.FitnessRequest.id)
  return id_.GetNoArena();
}
inline void FitnessRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hcfi.FitnessRequest.id)
}
#if LANG_CXX11
inline void FitnessRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hcfi.FitnessRequest.id)
}
#endif
inline void FitnessRequest::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hcfi.FitnessRequest.id)
}
inline void FitnessRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hcfi.FitnessRequest.id)
}
inline ::std::string* FitnessRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:hcfi.FitnessRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FitnessRequest::release_id() {
  // @@protoc_insertion_point(field_release:hcfi.FitnessRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FitnessRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:hcfi.FitnessRequest.id)
}

// double fitness = 2;
inline void FitnessRequest::clear_fitness() {
  fitness_ = 0;
}
inline double FitnessRequest::fitness() const {
  // @@protoc_insertion_point(field_get:hcfi.FitnessRequest.fitness)
  return fitness_;
}
inline void FitnessRequest::set_fitness(double value) {
  
  fitness_ = value;
  // @@protoc_insertion_point(field_set:hcfi.FitnessRequest.fitness)
}

// string solution = 3;
inline void FitnessRequest::clear_solution() {
  solution_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FitnessRequest::solution() const {
  // @@protoc_insertion_point(field_get:hcfi.FitnessRequest.solution)
  return solution_.GetNoArena();
}
inline void FitnessRequest::set_solution(const ::std::string& value) {
  
  solution_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hcfi.FitnessRequest.solution)
}
#if LANG_CXX11
inline void FitnessRequest::set_solution(::std::string&& value) {
  
  solution_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hcfi.FitnessRequest.solution)
}
#endif
inline void FitnessRequest::set_solution(const char* value) {
  
  solution_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hcfi.FitnessRequest.solution)
}
inline void FitnessRequest::set_solution(const char* value, size_t size) {
  
  solution_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hcfi.FitnessRequest.solution)
}
inline ::std::string* FitnessRequest::mutable_solution() {
  
  // @@protoc_insertion_point(field_mutable:hcfi.FitnessRequest.solution)
  return solution_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FitnessRequest::release_solution() {
  // @@protoc_insertion_point(field_release:hcfi.FitnessRequest.solution)
  
  return solution_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FitnessRequest::set_allocated_solution(::std::string* solution) {
  if (solution != NULL) {
    
  } else {
    
  }
  solution_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), solution);
  // @@protoc_insertion_point(field_set_allocated:hcfi.FitnessRequest.solution)
}

// -------------------------------------------------------------------

// StopRequest

// string id = 1;
inline void StopRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StopRequest::id() const {
  // @@protoc_insertion_point(field_get:hcfi.StopRequest.id)
  return id_.GetNoArena();
}
inline void StopRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hcfi.StopRequest.id)
}
#if LANG_CXX11
inline void StopRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hcfi.StopRequest.id)
}
#endif
inline void StopRequest::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hcfi.StopRequest.id)
}
inline void StopRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hcfi.StopRequest.id)
}
inline ::std::string* StopRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:hcfi.StopRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopRequest::release_id() {
  // @@protoc_insertion_point(field_release:hcfi.StopRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:hcfi.StopRequest.id)
}

// string message = 2;
inline void StopRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StopRequest::message() const {
  // @@protoc_insertion_point(field_get:hcfi.StopRequest.message)
  return message_.GetNoArena();
}
inline void StopRequest::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hcfi.StopRequest.message)
}
#if LANG_CXX11
inline void StopRequest::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hcfi.StopRequest.message)
}
#endif
inline void StopRequest::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hcfi.StopRequest.message)
}
inline void StopRequest::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hcfi.StopRequest.message)
}
inline ::std::string* StopRequest::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:hcfi.StopRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopRequest::release_message() {
  // @@protoc_insertion_point(field_release:hcfi.StopRequest.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopRequest::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:hcfi.StopRequest.message)
}

// -------------------------------------------------------------------

// StopResponse

// string id = 1;
inline void StopResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StopResponse::id() const {
  // @@protoc_insertion_point(field_get:hcfi.StopResponse.id)
  return id_.GetNoArena();
}
inline void StopResponse::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hcfi.StopResponse.id)
}
#if LANG_CXX11
inline void StopResponse::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hcfi.StopResponse.id)
}
#endif
inline void StopResponse::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hcfi.StopResponse.id)
}
inline void StopResponse::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hcfi.StopResponse.id)
}
inline ::std::string* StopResponse::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:hcfi.StopResponse.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopResponse::release_id() {
  // @@protoc_insertion_point(field_release:hcfi.StopResponse.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopResponse::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:hcfi.StopResponse.id)
}

// string solution = 2;
inline void StopResponse::clear_solution() {
  solution_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StopResponse::solution() const {
  // @@protoc_insertion_point(field_get:hcfi.StopResponse.solution)
  return solution_.GetNoArena();
}
inline void StopResponse::set_solution(const ::std::string& value) {
  
  solution_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hcfi.StopResponse.solution)
}
#if LANG_CXX11
inline void StopResponse::set_solution(::std::string&& value) {
  
  solution_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hcfi.StopResponse.solution)
}
#endif
inline void StopResponse::set_solution(const char* value) {
  
  solution_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hcfi.StopResponse.solution)
}
inline void StopResponse::set_solution(const char* value, size_t size) {
  
  solution_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hcfi.StopResponse.solution)
}
inline ::std::string* StopResponse::mutable_solution() {
  
  // @@protoc_insertion_point(field_mutable:hcfi.StopResponse.solution)
  return solution_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopResponse::release_solution() {
  // @@protoc_insertion_point(field_release:hcfi.StopResponse.solution)
  
  return solution_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopResponse::set_allocated_solution(::std::string* solution) {
  if (solution != NULL) {
    
  } else {
    
  }
  solution_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), solution);
  // @@protoc_insertion_point(field_set_allocated:hcfi.StopResponse.solution)
}

// double fitness = 3;
inline void StopResponse::clear_fitness() {
  fitness_ = 0;
}
inline double StopResponse::fitness() const {
  // @@protoc_insertion_point(field_get:hcfi.StopResponse.fitness)
  return fitness_;
}
inline void StopResponse::set_fitness(double value) {
  
  fitness_ = value;
  // @@protoc_insertion_point(field_set:hcfi.StopResponse.fitness)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace hcfi

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hcfi_2eproto__INCLUDED
