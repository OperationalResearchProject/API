// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api.proto

#include "api.pb.h"
#include "api.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace api {

static const char* OperationalResearch_method_names[] = {
  "/api.OperationalResearch/InitConversation",
  "/api.OperationalResearch/SendFitness",
  "/api.OperationalResearch/StopConversation",
};

std::unique_ptr< OperationalResearch::Stub> OperationalResearch::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< OperationalResearch::Stub> stub(new OperationalResearch::Stub(channel));
  return stub;
}

OperationalResearch::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_InitConversation_(OperationalResearch_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendFitness_(OperationalResearch_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopConversation_(OperationalResearch_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OperationalResearch::Stub::InitConversation(::grpc::ClientContext* context, const ::api::InitRequest& request, ::api::FitnessResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_InitConversation_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::api::FitnessResponse>* OperationalResearch::Stub::AsyncInitConversationRaw(::grpc::ClientContext* context, const ::api::InitRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::api::FitnessResponse>(channel_.get(), cq, rpcmethod_InitConversation_, context, request);
}

::grpc::Status OperationalResearch::Stub::SendFitness(::grpc::ClientContext* context, const ::api::FitnessRequest& request, ::api::FitnessResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SendFitness_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::api::FitnessResponse>* OperationalResearch::Stub::AsyncSendFitnessRaw(::grpc::ClientContext* context, const ::api::FitnessRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::api::FitnessResponse>(channel_.get(), cq, rpcmethod_SendFitness_, context, request);
}

::grpc::Status OperationalResearch::Stub::StopConversation(::grpc::ClientContext* context, const ::api::StopRequest& request, ::api::StopResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_StopConversation_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::api::StopResponse>* OperationalResearch::Stub::AsyncStopConversationRaw(::grpc::ClientContext* context, const ::api::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::api::StopResponse>(channel_.get(), cq, rpcmethod_StopConversation_, context, request);
}

OperationalResearch::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      OperationalResearch_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< OperationalResearch::Service, ::api::InitRequest, ::api::FitnessResponse>(
          std::mem_fn(&OperationalResearch::Service::InitConversation), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      OperationalResearch_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< OperationalResearch::Service, ::api::FitnessRequest, ::api::FitnessResponse>(
          std::mem_fn(&OperationalResearch::Service::SendFitness), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      OperationalResearch_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< OperationalResearch::Service, ::api::StopRequest, ::api::StopResponse>(
          std::mem_fn(&OperationalResearch::Service::StopConversation), this)));
}

OperationalResearch::Service::~Service() {
}

::grpc::Status OperationalResearch::Service::InitConversation(::grpc::ServerContext* context, const ::api::InitRequest* request, ::api::FitnessResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OperationalResearch::Service::SendFitness(::grpc::ServerContext* context, const ::api::FitnessRequest* request, ::api::FitnessResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OperationalResearch::Service::StopConversation(::grpc::ServerContext* context, const ::api::StopRequest* request, ::api::StopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace api

