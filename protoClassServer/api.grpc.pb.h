// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api.proto
#ifndef GRPC_api_2eproto__INCLUDED
#define GRPC_api_2eproto__INCLUDED

#include "api.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace api {

class OperationalResearch final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status InitConversation(::grpc::ClientContext* context, const ::api::InitRequest& request, ::api::FitnessResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::FitnessResponse>> AsyncInitConversation(::grpc::ClientContext* context, const ::api::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::FitnessResponse>>(AsyncInitConversationRaw(context, request, cq));
    }
    virtual ::grpc::Status SendFitness(::grpc::ClientContext* context, const ::api::FitnessRequest& request, ::api::FitnessResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::FitnessResponse>> AsyncSendFitness(::grpc::ClientContext* context, const ::api::FitnessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::FitnessResponse>>(AsyncSendFitnessRaw(context, request, cq));
    }
    virtual ::grpc::Status StopConversation(::grpc::ClientContext* context, const ::api::StopRequest& request, ::api::StopResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::StopResponse>> AsyncStopConversation(::grpc::ClientContext* context, const ::api::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::StopResponse>>(AsyncStopConversationRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::FitnessResponse>* AsyncInitConversationRaw(::grpc::ClientContext* context, const ::api::InitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::FitnessResponse>* AsyncSendFitnessRaw(::grpc::ClientContext* context, const ::api::FitnessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::StopResponse>* AsyncStopConversationRaw(::grpc::ClientContext* context, const ::api::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status InitConversation(::grpc::ClientContext* context, const ::api::InitRequest& request, ::api::FitnessResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::FitnessResponse>> AsyncInitConversation(::grpc::ClientContext* context, const ::api::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::FitnessResponse>>(AsyncInitConversationRaw(context, request, cq));
    }
    ::grpc::Status SendFitness(::grpc::ClientContext* context, const ::api::FitnessRequest& request, ::api::FitnessResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::FitnessResponse>> AsyncSendFitness(::grpc::ClientContext* context, const ::api::FitnessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::FitnessResponse>>(AsyncSendFitnessRaw(context, request, cq));
    }
    ::grpc::Status StopConversation(::grpc::ClientContext* context, const ::api::StopRequest& request, ::api::StopResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::StopResponse>> AsyncStopConversation(::grpc::ClientContext* context, const ::api::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::StopResponse>>(AsyncStopConversationRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::api::FitnessResponse>* AsyncInitConversationRaw(::grpc::ClientContext* context, const ::api::InitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::FitnessResponse>* AsyncSendFitnessRaw(::grpc::ClientContext* context, const ::api::FitnessRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::StopResponse>* AsyncStopConversationRaw(::grpc::ClientContext* context, const ::api::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_InitConversation_;
    const ::grpc::RpcMethod rpcmethod_SendFitness_;
    const ::grpc::RpcMethod rpcmethod_StopConversation_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status InitConversation(::grpc::ServerContext* context, const ::api::InitRequest* request, ::api::FitnessResponse* response);
    virtual ::grpc::Status SendFitness(::grpc::ServerContext* context, const ::api::FitnessRequest* request, ::api::FitnessResponse* response);
    virtual ::grpc::Status StopConversation(::grpc::ServerContext* context, const ::api::StopRequest* request, ::api::StopResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_InitConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_InitConversation() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_InitConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitConversation(::grpc::ServerContext* context, const ::api::InitRequest* request, ::api::FitnessResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitConversation(::grpc::ServerContext* context, ::api::InitRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::FitnessResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendFitness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendFitness() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendFitness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendFitness(::grpc::ServerContext* context, const ::api::FitnessRequest* request, ::api::FitnessResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendFitness(::grpc::ServerContext* context, ::api::FitnessRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::FitnessResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StopConversation() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StopConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopConversation(::grpc::ServerContext* context, const ::api::StopRequest* request, ::api::StopResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopConversation(::grpc::ServerContext* context, ::api::StopRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::StopResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_InitConversation<WithAsyncMethod_SendFitness<WithAsyncMethod_StopConversation<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_InitConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_InitConversation() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_InitConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitConversation(::grpc::ServerContext* context, const ::api::InitRequest* request, ::api::FitnessResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendFitness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendFitness() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendFitness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendFitness(::grpc::ServerContext* context, const ::api::FitnessRequest* request, ::api::FitnessResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StopConversation() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StopConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopConversation(::grpc::ServerContext* context, const ::api::StopRequest* request, ::api::StopResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InitConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_InitConversation() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::api::InitRequest, ::api::FitnessResponse>(std::bind(&WithStreamedUnaryMethod_InitConversation<BaseClass>::StreamedInitConversation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InitConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InitConversation(::grpc::ServerContext* context, const ::api::InitRequest* request, ::api::FitnessResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInitConversation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::InitRequest,::api::FitnessResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendFitness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SendFitness() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::api::FitnessRequest, ::api::FitnessResponse>(std::bind(&WithStreamedUnaryMethod_SendFitness<BaseClass>::StreamedSendFitness, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendFitness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendFitness(::grpc::ServerContext* context, const ::api::FitnessRequest* request, ::api::FitnessResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendFitness(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::FitnessRequest,::api::FitnessResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_StopConversation() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::api::StopRequest, ::api::StopResponse>(std::bind(&WithStreamedUnaryMethod_StopConversation<BaseClass>::StreamedStopConversation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StopConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopConversation(::grpc::ServerContext* context, const ::api::StopRequest* request, ::api::StopResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopConversation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::StopRequest,::api::StopResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_InitConversation<WithStreamedUnaryMethod_SendFitness<WithStreamedUnaryMethod_StopConversation<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_InitConversation<WithStreamedUnaryMethod_SendFitness<WithStreamedUnaryMethod_StopConversation<Service > > > StreamedService;
};

}  // namespace api


#endif  // GRPC_api_2eproto__INCLUDED
